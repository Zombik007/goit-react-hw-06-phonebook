{"version":3,"sources":["Phonebook/Phonebook.module.css","redux/contacts/contacts-actions.js","Phonebook/ContactForm.js","Phonebook/FilterContact.js","Phonebook/ContactList.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","data","payload","id","uuidv4","name","number","deleteContact","filterContact","connect","dispatch","onSubmit","contactsActions","useState","setName","setNumber","inputChange","e","target","value","resetForm","className","styles","phonebook__form","preventDefault","phonebook__label","phonebook__input","type","pattern","title","required","onChange","phonebook__button_form","state","contacts","filter","getFilteredContacts","allContacts","normalizeFilter","toLowerCase","contact","includes","items","onDeleteContact","phonebook__list","map","phonebook__item","phonebook__button","onClick","App","createReducer","actions","_","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.424204ad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"phonebook__form\":\"Phonebook_phonebook__form__3MLKj\",\"phonebook__label\":\"Phonebook_phonebook__label__1IKyg\",\"phonebook__input\":\"Phonebook_phonebook__input__9AOTi\",\"phonebook__button_form\":\"Phonebook_phonebook__button_form__2wG8w\",\"phonebook__list\":\"Phonebook_phonebook__list__1jSN1\",\"phonebook__item\":\"Phonebook_phonebook__item__3BSW3\",\"phonebook__button\":\"Phonebook_phonebook__button__g0Km7\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst addContact = createAction('contacts/Add', data => ({\r\n  payload: { id: uuidv4(), name: data.name, number: data.number },\r\n}));\r\n\r\nconst deleteContact = createAction('contacts/Delete');\r\n\r\nconst filterContact = createAction('contacts/Filter');\r\n\r\nexport default { addContact, deleteContact, filterContact };\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../redux/contacts/contacts-actions';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Phonebook.module.css';\r\n\r\nconst ContactForm = ({ onSubmit }) => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const inputChange = e => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const formSubmit = e => {\r\n    e.preventDefault();\r\n    onSubmit({ name, number });\r\n    resetForm();\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form className={styles.phonebook__form} onSubmit={formSubmit}>\r\n        <label className={styles.phonebook__label}>\r\n          Name\r\n          <input\r\n            className={styles.phonebook__input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            onChange={inputChange}\r\n          />\r\n        </label>\r\n\r\n        <label className={styles.phonebook__label}>\r\n          Number\r\n          <input\r\n            className={styles.phonebook__input}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            value={number}\r\n            onChange={inputChange}\r\n          />\r\n        </label>\r\n        <button className={styles.phonebook__button_form} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: data => dispatch(contactsActions.addContact(data)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../redux/contacts/contacts-actions';\r\n\r\nconst FilterContact = ({ value, onChange }) => {\r\n  return (\r\n    <>\r\n      <p>Find contacts by name</p>\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        title=\"Search contacts\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(contactsActions.filterContact(e.target.value)),\r\n});\r\n\r\nFilterContact.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterContact);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport contactsActions from '../redux/contacts/contacts-actions';\r\n\r\nimport styles from './Phonebook.module.css';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n  return (\r\n    <ul className={styles.phonebook__list}>\r\n      {contacts.map(({ id, name, number }) => {\r\n        return (\r\n          <li className={styles.phonebook__item} key={id}>\r\n            {name}: {number}\r\n            <button\r\n              className={styles.phonebook__button}\r\n              onClick={() => {\r\n                onDeleteContact(id);\r\n              }}\r\n            >\r\n              Delete contact\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst getFilteredContacts = (allContacts, filter) => {\r\n  const normalizeFilter = filter.toLowerCase();\r\n\r\n  return allContacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizeFilter),\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  contacts: getFilteredContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(contactsActions.deleteContact(id)),\r\n});\r\n\r\nContactList.propTypes = {\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\nimport ContactForm from './Phonebook/ContactForm';\r\nimport FilterContact from './Phonebook/FilterContact';\r\nimport ContactList from './Phonebook/ContactList';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n\r\n      <h2>Contacts</h2>\r\n      <FilterContact />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n\r\n// componentDidMount() {\r\n//   const contacts = localStorage.getItem('contacts');\r\n//   const parsedContacts = JSON.parse(contacts);\r\n//   if (parsedContacts) {\r\n//     this.setState({ contacts: parsedContacts });\r\n//   }\r\n// }\r\n\r\n// componentDidUpdate(prevProps, prevState) {\r\n//   if (store.getState().contacts !== prevState) {\r\n//     localStorage.setItem(\r\n//       'contacts',\r\n//       JSON.stringify(store.getState().contacts.items),\r\n//     );\r\n//   }\r\n// }\r\n\r\n//     return (\r\n//       <div>\r\n//         <h1>Phonebook</h1>\r\n//         <ContactForm />\r\n\r\n//         <h2>Contacts</h2>\r\n//         <FilterContact />\r\n//         <ContactList />\r\n//       </div>\r\n//     );\r\n\r\n// export default App;\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [payload, ...state],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.filterContact]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({ items, filter });\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst middleware = getDefaultMiddleware =>\r\n  getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  });\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport App from './App';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n      <PersistGate loading={null} persistor={store.persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}